version: '3.8'

services:
  validation-service:
    build:
      context: ./src/services/validation-service
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC_INJECTION=${KAFKA_TOPIC_INJECTION}
      - KAFKA_TOPIC_VALID_ROWS=${KAFKA_TOPIC_VALID_ROWS}
      - KAFKA_TOPIC_INVALID_ROWS=${KAFKA_TOPIC_INVALID_ROWS}
      - KAFKA_TOPIC_PROGRESS=${KAFKA_TOPIC_PROGRESS}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_CLIENT_ID=${POSTGRES_CLIENT_ID}
      - DATABRICKS_OAUTH_TOKEN=${DATABRICKS_OAUTH_TOKEN}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  progress-service:
    build:
      context: ./src/services/progress-service
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC_PROGRESS=${KAFKA_TOPIC_PROGRESS}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_CLIENT_ID=${POSTGRES_CLIENT_ID}
      - DATABRICKS_OAUTH_TOKEN=${DATABRICKS_OAUTH_TOKEN}
      - SIGNALR_CONNECTION_STRING=${SIGNALR_CONNECTION_STRING}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
